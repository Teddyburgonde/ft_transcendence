const DarwinUpdater = require('./DarwinUpdater');

describe('darwinUpdater', function () {
  let darwinUpdater;
  const updaterOptions = {
    autoUpdater: {
      on: jest.fn(),
    },
    adapter: {
      getLogger: function () {
        return {
          error: jest.fn(),
          info: jest.fn(),
          warn: jest.fn(),
          getContext: jest.fn().mockReturnValue({
            api: '@postman/app-updater',
            domain: 'starship',
          }),
        };
      },
    },
  };

  beforeAll(function () {
    darwinUpdater = new DarwinUpdater(updaterOptions);
  });

  describe('getFeedUrl', function () {
    it('should return a string for 64 bit', () => {
      const updateInfo = {
        platform: 'OSX',
        arch: '64',
        version: '6.1.0',
        updateServerDomain: 'https://dl-beta.pstmn.io/',
        channel: 'stable',
        additionalParamsString: 'params',
      };
      const returnVal = darwinUpdater.getFeedUrl(updateInfo);

      expect(returnVal).toEqual(
        'https://dl-beta.pstmn.io/update/status?currentVersion=6.1.0&platform=osx&channel=stable&arch=64&params'
      );
    });

    it('should return a string for arm64 bit', () => {
      const updateInfo = {
        platform: 'OSX',
        arch: 'arm64',
        version: '6.1.0',
        updateServerDomain: 'https://dl-beta.pstmn.io/',
        channel: 'stable',
        additionalParamsString: 'params',
      };
      const returnVal = darwinUpdater.getFeedUrl(updateInfo);

      expect(returnVal).toEqual(
        'https://dl-beta.pstmn.io/update/status?currentVersion=6.1.0&platform=osx&channel=stable&arch=arm64&params'
      );
    });

    it('should throw error if the updateInfo is of type String', () => {
      let error = null;
      try {
        darwinUpdater.getFeedUrl('updateInfo');
      } catch (e) {
        error = e;
      } finally {
        expect(error).toBeInstanceOf(Error);
      }
    });

    it('should throw error if the updateInfo is of type Array', () => {
      let error = null;
      try {
        darwinUpdater.getFeedUrl([]);
      } catch (e) {
        error = e;
      } finally {
        expect(error).toBeInstanceOf(Error);
      }
    });

    it('should throw error if the updateInfo is whitespace', () => {
      let error = null;
      try {
        darwinUpdater.getFeedUrl(' ');
      } catch (e) {
        error = e;
      } finally {
        expect(error).toBeInstanceOf(Error);
      }
    });

    it('should throw error if the updateInfo.platform is not of type string', () => {
      let error = null;
      try {
        darwinUpdater.getFeedUrl({ platform: 12 });
      } catch (e) {
        error = e;
      } finally {
        expect(error).toBeInstanceOf(Error);
      }
    });
  });
});
