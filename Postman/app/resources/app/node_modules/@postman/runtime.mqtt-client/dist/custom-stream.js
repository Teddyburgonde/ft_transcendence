"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customStream = customStream;
const postman_ws_1 = __importDefault(require("postman-ws"));
const tls = __importStar(require("tls"));
const net = __importStar(require("net"));
function customStream(options) {
    const { parsedURL, tlsOptions } = options;
    const { isTLS, protocol, host, port: portString } = parsedURL;
    const { rejectUnauthorized, secureContext } = tlsOptions ?? {};
    const port = portString ? Number(portString) : 1883;
    let stream;
    try {
        if (protocol === 'ws' || protocol === 'wss') {
            const webSocket = new postman_ws_1.default(parsedURL.url, ['mqtt'], {
                rejectUnauthorized,
                ...secureContext,
            });
            stream = postman_ws_1.default.createWebSocketStream(webSocket);
        }
        else if (isTLS) {
            stream = tls.connect({
                port: port,
                host,
                rejectUnauthorized,
                ...secureContext,
            });
        }
        else {
            stream = net.createConnection({ port, host });
        }
        return stream;
    }
    catch (err) {
        throw new Error(`Unable to build socket: ${err}`);
    }
}
//# sourceMappingURL=custom-stream.js.map