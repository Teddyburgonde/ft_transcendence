import { AgentPublishOptions, AgentSubscribeOptions } from '@postman/runtime.mqtt-utils';
import { EventEmitter } from 'events';
import * as mqtt from 'mqtt/dist/mqtt';
export declare class Connection extends EventEmitter {
    private client;
    private reconnectCount;
    constructor(client: mqtt.MqttClient);
    publish(topic: string, message: string | Buffer | Uint8Array, options: AgentPublishOptions): void;
    subscribe(topic: string, options: AgentSubscribeOptions): void;
    unsubscribe(topic: string): void;
    disconnect(force?: boolean, options?: Partial<mqtt.IDisconnectPacket>): void;
    getClient(): mqtt.MqttClient;
    isConnected(): boolean;
    /**
     * Checks for message IDs from the broker that don't correspond to an outgoing handshake.
     * Emits and error and disconnects the client if an error is found.
     * @param packet Packet to be checked for outgoing message ID.
     * @returns Disconnect packet if an error is found, undefined otherwise.
     */
    checkForBadMessageIds(packet: mqtt.Packet): {
        reasonCode: number;
        properties: {
            reasonString: string;
        };
    } | undefined;
}
