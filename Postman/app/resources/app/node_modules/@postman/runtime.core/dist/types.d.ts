import { Event } from '@postman/runtime.event-channel';
import Extension from './extension';
import ItemType from './item-type';
export type StringLiteral<T extends string> = T extends string ? string extends T ? never : T : never;
export type GetExtensionData<E extends Extension> = E extends Extension.Specific<any, infer D, any> ? D : E extends Extension ? unknown : never;
export type GetExtensionConfig<E extends Extension> = E extends Extension.Specific<any, any, infer C> ? C : E extends Extension ? unknown : never;
export type GetTypeData<Y extends ItemType> = Y extends ItemType.Specific<infer T, any, any, any, any> ? T : Y extends ItemType ? unknown : never;
export type GetTypeExtensions<Y extends ItemType> = Y extends ItemType.Specific<any, infer E, any, any, any> ? E : Y extends ItemType ? Extension : never;
export type GetTypeConfig<Y extends ItemType> = Y extends ItemType.Specific<any, any, infer C, any, any> ? C : Y extends ItemType ? unknown : never;
export type GetSentEvents<Y extends ItemType> = Y extends ItemType.Specific<any, any, any, infer S, any> ? S : Y extends ItemType ? Event : never;
export type GetReceivedEvents<Y extends ItemType> = Y extends ItemType.Specific<any, any, any, any, infer R> ? R : Y extends ItemType ? Event : never;
export type SelectExtension<N extends string, E extends Extension> = E['name'] extends N ? string extends N ? Extension : E : never;
