import { FromSchema } from 'json-schema-to-ts';
import { Event } from '@postman/runtime.core';
import { MessageType, MessageSubType } from '@postman/runtime.protocol-utils';
declare const definition: {
    connected: {
        schema: {
            type: "object";
            properties: {
                handshakeRequest: {
                    type: "object";
                    required: ["method", "headers", "url"];
                    properties: {
                        method: {
                            type: "string";
                            enum: ["GET", "CONNECT"];
                        };
                        headers: {
                            type: "array";
                            items: {
                                type: "object";
                                required: ["key", "value"];
                                properties: {
                                    key: {
                                        type: "string";
                                    };
                                    value: {
                                        type: "string";
                                    };
                                };
                                additionalProperties: false;
                            };
                        };
                        url: {
                            type: "string";
                        };
                    };
                    additionalProperties: false;
                };
                handshakeResponse: {
                    type: "object";
                    required: ["statusCode", "statusMessage", "headers"];
                    properties: {
                        statusCode: {
                            type: "integer";
                            minimum: 100;
                            maximum: 599;
                        };
                        statusMessage: {
                            type: "string";
                        };
                        headers: {
                            type: "array";
                            items: {
                                type: "object";
                                required: ["key", "value"];
                                properties: {
                                    key: {
                                        type: "string";
                                    };
                                    value: {
                                        type: "string";
                                    };
                                };
                                additionalProperties: false;
                            };
                        };
                    };
                    additionalProperties: false;
                };
            };
            additionalProperties: false;
        };
    };
    disconnected: {
        schema: {
            type: "object";
            properties: {
                code: {
                    type: "integer";
                    minimum: 1000;
                    maximum: 4999;
                };
                reason: {
                    type: "string";
                };
            };
            additionalProperties: false;
        };
    };
    error: {
        schema: {
            type: "object";
            required: ["error"];
            properties: {
                error: {
                    type: "object";
                    required: ["message"];
                    properties: {
                        message: {
                            type: "string";
                        };
                    };
                    additionalProperties: false;
                };
                handshakeRequest: {
                    type: "object";
                    required: ["method", "headers", "url"];
                    properties: {
                        method: {
                            type: "string";
                            enum: ["GET", "CONNECT"];
                        };
                        headers: {
                            type: "array";
                            items: {
                                type: "object";
                                required: ["key", "value"];
                                properties: {
                                    key: {
                                        type: "string";
                                    };
                                    value: {
                                        type: "string";
                                    };
                                };
                                additionalProperties: false;
                            };
                        };
                        url: {
                            type: "string";
                        };
                    };
                    additionalProperties: false;
                };
                handshakeResponse: {
                    type: "object";
                    required: ["statusCode", "statusMessage", "headers"];
                    properties: {
                        statusCode: {
                            type: "integer";
                            minimum: 100;
                            maximum: 599;
                        };
                        statusMessage: {
                            type: "string";
                        };
                        headers: {
                            type: "array";
                            items: {
                                type: "object";
                                required: ["key", "value"];
                                properties: {
                                    key: {
                                        type: "string";
                                    };
                                    value: {
                                        type: "string";
                                    };
                                };
                                additionalProperties: false;
                            };
                        };
                    };
                    additionalProperties: false;
                };
            };
            additionalProperties: false;
        };
    };
    reconnecting: {
        schema: {
            type: "object";
            additionalProperties: false;
        };
    };
    aborted: {
        schema: {
            type: "object";
            additionalProperties: false;
        };
    };
    'sent-message': {
        schema: {
            type: "object";
            required: ["data", "eventName"];
            properties: {
                data: {
                    type: "object";
                    required: ["type", "payload"];
                    properties: {
                        type: {
                            type: "string";
                        };
                        payload: {
                            type: "string";
                        };
                    };
                    additionalProperties: false;
                };
                eventName: {
                    type: "string";
                };
                mimeType: {
                    type: "string";
                };
                size: {
                    type: "integer";
                    minimum: 0;
                };
                fileExtension: {
                    type: "string";
                };
            };
            additionalProperties: false;
        };
    };
    'received-message': {
        schema: {
            type: "object";
            required: ["data", "eventName"];
            properties: {
                data: {
                    type: "object";
                    required: ["type", "payload"];
                    properties: {
                        type: {
                            type: "string";
                        };
                        payload: {
                            type: "string";
                        };
                    };
                    additionalProperties: false;
                };
                eventName: {
                    type: "string";
                };
                mimeType: {
                    type: "string";
                };
                size: {
                    type: "integer";
                    minimum: 0;
                };
                fileExtension: {
                    type: "string";
                };
            };
            additionalProperties: false;
        };
    };
    'subscribe-event': {
        schema: {
            type: "object";
            required: ["eventName"];
            properties: {
                eventName: {
                    type: "string";
                };
            };
            additionalProperties: false;
        };
    };
    'unsubscribe-event': {
        schema: {
            type: "object";
            required: ["eventName"];
            properties: {
                eventName: {
                    type: "string";
                };
            };
            additionalProperties: false;
        };
    };
};
export type Connected = Event<'connected', FromSchema<(typeof definition)['connected']['schema']>>;
export type Error = Event<'error', FromSchema<(typeof definition)['error']['schema']>>;
export type Disconnected = Event<'disconnected', FromSchema<(typeof definition)['disconnected']['schema']>>;
export type Reconnecting = Event<'reconnecting', FromSchema<(typeof definition)['reconnecting']['schema']>>;
export type Aborted = Event<'aborted', FromSchema<(typeof definition)['aborted']['schema']>>;
export type SentMessage = Event<'sent-message', FromSchema<(typeof definition)['sent-message']['schema']>>;
export type ReceivedMessage = Event<'received-message', FromSchema<(typeof definition)['received-message']['schema']>>;
export type SubscribeEvent = Event<'subscribe-event', FromSchema<(typeof definition)['subscribe-event']['schema']>>;
export type UnsubscribeEvent = Event<'unsubscribe-event', FromSchema<(typeof definition)['unsubscribe-event']['schema']>>;
export type Subscribe = Event<'subscribe', {
    eventName: string;
}>;
export type Unsubscribe = Event<'unsubscribe', {
    eventName: string;
}>;
type PublishPayload = {
    message: string;
    type: Exclude<MessageType, MessageType.BINARY>;
} | {
    message: string;
    type: MessageType.BINARY;
    subType: MessageSubType;
};
export type Publish = Event<'publish', {
    payload: PublishPayload[];
    eventName: string;
    acknowledgement?: boolean;
}>;
export type Disconnect = Event<'disconnect', {}>;
export {};
