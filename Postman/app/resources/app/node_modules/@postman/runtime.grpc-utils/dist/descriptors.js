"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBinaryDescriptor = exports.toJSONDescriptor = void 0;
const Protobuf = __importStar(require("@postman/protobufjs"));
const descriptor_1 = require("@postman/protobufjs/ext/descriptor");
const js_base64_1 = require("js-base64");
const TO_JSON_OPTIONS = { keepComments: true };
// Accepts either a JSON descriptor, a binary descriptor, or a base-64-encoded
// binary descriptor, and returns a parsed JSON descriptor.
function toJSONDescriptor(descriptor) {
    if (typeof descriptor === 'string') {
        if (descriptor.startsWith('{')) {
            descriptor = JSON.parse(descriptor);
        }
        else if (/^[a-zA-Z0-9+/=]+\s*$/.test(descriptor)) {
            descriptor = js_base64_1.Base64.toUint8Array(descriptor);
        }
    }
    if (descriptor instanceof Uint8Array) {
        return Protobuf.Root.fromDescriptor(descriptor, {
            useMapField: true,
        }).toJSON(TO_JSON_OPTIONS);
    }
    if (typeof descriptor === 'object' &&
        descriptor !== null &&
        typeof descriptor.nested === 'object' &&
        descriptor.nested !== null) {
        return descriptor;
    }
    throw new TypeError('Invalid Protobuf descriptor');
}
exports.toJSONDescriptor = toJSONDescriptor;
// Accepts either a JSON descriptor, a binary descriptor, or a base-64-encoded
// binary descriptor, and returns a binary descriptor.
function toBinaryDescriptor(descriptor) {
    const jsonDescriptor = toJSONDescriptor(descriptor);
    const root = Protobuf.Root.fromJSON(jsonDescriptor);
    root.resolveAll();
    return descriptor_1.FileDescriptorSet.encode(root.toDescriptor()).finish();
}
exports.toBinaryDescriptor = toBinaryDescriptor;
//# sourceMappingURL=descriptors.js.map