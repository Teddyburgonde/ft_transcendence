"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MQTTEvents = void 0;
const json_schema_to_ts_1 = require("json-schema-to-ts");
const runtime_core_1 = require("@postman/runtime.core");
const runtime_documentation_1 = __importDefault(require("@postman/runtime.documentation"));
const runtime_variables_1 = __importDefault(require("@postman/runtime.variables"));
const handler_1 = __importDefault(require("./handler"));
exports.MQTTEvents = __importStar(require("./events"));
__exportStar(require("./agent"), exports);
const definition = (0, json_schema_to_ts_1.asConst)({
    name: 'mqtt-request',
    summary: 'MQTT Request',
    schema: {
        type: 'object',
        required: ['url'],
        properties: {
            url: {
                type: 'string',
            },
            clientId: {
                type: 'string',
            },
            version: {
                type: 'integer',
                enum: [4, 5],
            },
            topics: {
                type: 'array',
                items: {
                    type: 'object',
                    required: ['name'],
                    properties: {
                        name: {
                            type: 'string',
                        },
                        qos: {
                            type: 'integer',
                            enum: [0, 1, 2],
                        },
                        subscribe: {
                            type: 'boolean',
                        },
                        description: {
                            type: 'string',
                        },
                    },
                },
            },
            lastWill: {
                type: 'object',
                properties: {
                    payload: {
                        type: 'string',
                    },
                    topic: {
                        type: 'string',
                    },
                    qos: {
                        type: 'integer',
                        enum: [0, 1, 2],
                    },
                    retain: {
                        type: 'boolean',
                    },
                    type: {
                        type: 'string',
                        enum: ['text', 'json', 'hex', 'base64'],
                    },
                    properties: {
                        type: 'object',
                        properties: {
                            payloadFormatIndicator: {
                                type: 'boolean',
                            },
                            messageExpiryInterval: {
                                type: 'integer',
                                minimum: 0,
                            },
                            willDelayInterval: {
                                type: 'integer',
                                minimum: 0,
                            },
                            responseTopic: {
                                type: 'string',
                            },
                            correlationData: {
                                type: 'string',
                            },
                            contentType: {
                                type: 'string',
                            },
                            userProperties: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    required: ['key', 'value'],
                                    properties: {
                                        key: {
                                            type: 'string',
                                        },
                                        value: {
                                            type: 'string',
                                        },
                                    },
                                    additionalProperties: false,
                                },
                            },
                        },
                        additionalProperties: false,
                    },
                },
            },
            properties: {
                type: 'object',
                properties: {
                    sessionExpiryInterval: {
                        type: 'integer',
                        minimum: 0,
                    },
                    receiveMaximum: {
                        type: 'integer',
                        minimum: 0,
                    },
                    maximumPacketSize: {
                        type: 'integer',
                        minimum: 0,
                    },
                    userProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            required: ['key', 'value'],
                            properties: {
                                key: {
                                    type: 'string',
                                },
                                value: {
                                    type: 'string',
                                },
                                description: {
                                    type: 'string',
                                },
                                disabled: {
                                    type: 'boolean',
                                },
                            },
                            additionalProperties: false,
                        },
                    },
                },
            },
            settings: {
                type: 'object',
                properties: {
                    cleanSession: {
                        type: 'boolean',
                    },
                    keepAlive: {
                        type: 'integer',
                        minimum: 0,
                    },
                    autoReconnect: {
                        type: 'boolean',
                    },
                    connectionTimeout: {
                        type: 'integer',
                        minimum: 0,
                    },
                    strictSSL: {
                        type: 'boolean',
                    },
                },
                additionalProperties: false,
            },
        },
        additionalProperties: false,
    },
    constraints: [
        {
            constraint: 'allow-child-types',
            allowed: ['mqtt-message'],
        },
        {
            constraint: 'allow-extensions',
            allowed: ['auth', 'documentation', 'variables'],
        },
    ],
});
const extensions = [
    runtime_documentation_1.default.use().implement({}),
    runtime_variables_1.default.use().implement({
        replaceInFields: [
            'payload.url',
            'payload.clientId',
            'payload.properties',
            'payload.settings',
            'payload.lastWill',
            'payload.topics',
            'extensions.auth',
        ],
    }),
];
//TODO: Add handler
var MQTTRequest;
(function (MQTTRequest) {
    MQTTRequest.use = runtime_core_1.ItemType.define(definition, extensions, handler_1.default);
})(MQTTRequest || (MQTTRequest = {}));
exports.default = MQTTRequest;
//# sourceMappingURL=index.js.map